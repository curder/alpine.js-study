import{_ as s,c as a,o as n,a as l}from"./app.05b292db.js";const u=JSON.parse('{"title":"x-on","description":"","frontmatter":{},"headers":[{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[]},{"level":2,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]},{"level":2,"title":"键盘事件","slug":"键盘事件","link":"#键盘事件","children":[]},{"level":2,"title":"自定义事件","slug":"自定义事件","link":"#自定义事件","children":[]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":3,"title":"阻止 prevent","slug":"阻止-prevent","link":"#阻止-prevent","children":[]},{"level":3,"title":"停止 stop","slug":"停止-stop","link":"#停止-stop","children":[]},{"level":3,"title":"外面 outside","slug":"外面-outside","link":"#外面-outside","children":[]},{"level":3,"title":"window 对象","slug":"window-对象","link":"#window-对象","children":[]},{"level":3,"title":"文档 document","slug":"文档-document","link":"#文档-document","children":[]},{"level":3,"title":"仅运行一次 once","slug":"仅运行一次-once","link":"#仅运行一次-once","children":[]},{"level":3,"title":"去抖动 debounce","slug":"去抖动-debounce","link":"#去抖动-debounce","children":[]},{"level":3,"title":"限流 throttle","slug":"限流-throttle","link":"#限流-throttle","children":[]},{"level":3,"title":"自身 self","slug":"自身-self","link":"#自身-self","children":[]},{"level":3,"title":"驼峰 camel","slug":"驼峰-camel","link":"#驼峰-camel","children":[]},{"level":3,"title":"点 dot","slug":"点-dot","link":"#点-dot","children":[]},{"level":3,"title":"被动 passive","slug":"被动-passive","link":"#被动-passive","children":[]}]}],"relativePath":"guide/x-on.md","lastUpdated":1672285985000}'),o={name:"guide/x-on.md"},e=l(`<h1 id="x-on" tabindex="-1">x-on <a class="header-anchor" href="#x-on" aria-hidden="true">#</a></h1><p><code>x-on</code> 允许在调度的 DOM 事件上运行代码。 如下示例，当单击按钮时会弹出提示。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-on:click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Hello&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><code>x-on</code> 只能监听小写名称的事件，因为 HTML 属性不区分大小写。</p><p>写作 <code>x-on:CLICK</code> 将侦听一个名为的事件 <code>click</code>。</p><p>如果需要侦听具有驼峰命名的自定义事件，则可以使用 <code>.camel</code> 帮助程序来解决此限制。</p><p>或者可以使用 <code>x-bind</code> 将 <code>x-on</code> 指令附加到 javascript 代码中的元素。</p><h2 id="语法糖" tabindex="-1">语法糖 <a class="header-anchor" href="#语法糖" aria-hidden="true">#</a></h2><p>Alpine 中支持将 <code>x-on:</code> 缩写成 <code>@</code>，例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--Before--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-on:click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Hello&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--After--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Hello&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-hidden="true">#</a></h2><p>如果需要在表达式中访问原生的 JavaScript 事件对象，可以使用 Alpine 提供的 <code>$event</code> 获取事件属性。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log($event.target.getAttribute(&#39;message&#39;))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">message</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Say Hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>上面通过 <code>$event.target.getAttribute()</code> 方法获取事件 DOM 的属性，也可以获取通过 <code>$event.target.innerHTML</code> 获取元素内部HTML。</p><p>另外，Alpine 还将事件对象传递给任何不带尾随括号引用的方法。例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handleClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handleClick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a></h2><p>Alpine 可以很容易地监听特定键上 <code>keydown</code> 的 <code>keyup</code> 事件。</p><p>下面是侦听输入元素内的 Enter 键的示例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.enter</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Keyup enter submitted!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>同时也可以添加一些键修饰符以实现更复杂的侦听器。例如：</p><p>按住并按下 <strong>Shift</strong> 键时运行的侦听 <strong>Enter</strong> 器，但在 <strong>Enter</strong> 单独按下时不会运行。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.shift.enter</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Keyup shift enter submitted!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>可以直接使用通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/UI_Events/Keyboard_event_key_values" target="_blank" rel="noreferrer"><code>KeyboardEvent.keys</code></a> 修饰符公开的任何有效键名，比如 <code>PageDown</code> 需要将它们转换为驼峰写法。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.page-down</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Page down submitted!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>为了便于参考，这里列出了常用的修饰键。</p><table><thead><tr><th>修饰符</th><th style="text-align:left;">键盘键</th></tr></thead><tbody><tr><td><code>.shift</code></td><td style="text-align:left;">Shift 换挡键</td></tr><tr><td><code>.enter</code></td><td style="text-align:left;">Enter 确认键</td></tr><tr><td><code>.space</code></td><td style="text-align:left;">Space 空格键</td></tr><tr><td><code>.ctrl</code></td><td style="text-align:left;">控制键</td></tr><tr><td><code>.meta</code></td><td style="text-align:left;">Mac 对应 Cmd，Windows 对应 Windows</td></tr><tr><td><code>.alt</code></td><td style="text-align:left;">Alt 按键</td></tr><tr><td><code>.up</code> <code>.down</code> <code>.left</code> <code>.right</code></td><td style="text-align:left;">上/下/左/右箭头</td></tr><tr><td><code>.escape</code></td><td style="text-align:left;">ESC按键</td></tr><tr><td><code>.tab</code></td><td style="text-align:left;">Tab按键</td></tr><tr><td><code>.caps-lock</code></td><td style="text-align:left;">大写锁定</td></tr><tr><td><code>.equal</code></td><td style="text-align:left;">等于号</td></tr><tr><td><code>.period</code></td><td style="text-align:left;">句号</td></tr><tr><td><code>.slash</code></td><td style="text-align:left;">斜线 /</td></tr></tbody></table><h2 id="自定义事件" tabindex="-1">自定义事件 <a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a></h2><p>AlpineJS 事件监听器是原生 DOM 事件监听器封装，因此它可以监听任何 DOM 事件，包括自定义事件。</p><p>下面是一个自定义 DOM 事件调度并监听它的组件示例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@custom-event</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Click dispatchEvent button was clicked!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$event.target.dispatchEvent(new CustomEvent(&#39;custom-event&#39;, { bubbles: true }))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click dispatchEvent</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>单击按钮时，<code>@custom-event</code> 将调用侦听器。</p><p>因为 <code>.dispatchEvent()</code> 的写法很冗长，AlpineJS 提供了一个 <code>$dispatch</code> 帮助程序来简化事情。</p><p>AlpineJS 提供一个魔法属性 <code>$dispatch</code> 重写的同一个组件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@custom-event</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Click $dispatch button was Clicked!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$dispatch(&#39;custom-event&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click $dispatch</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当然，也可以在 JavaScript 中通过使用 <code>addEventListener()</code> 来监听 AlpineJS 中发布的自定义事件。如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$dispatch(&#39;my-custom-event&#39;, {key: &#39;value&#39;})</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click $dispatch</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-custom-event</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">detail</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key))</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-hidden="true">#</a></h2><p>AlpineJS 提供了许多指令修饰符来自定义事件侦听器的行为。</p><h3 id="阻止-prevent" tabindex="-1">阻止 prevent <a class="header-anchor" href="#阻止-prevent" aria-hidden="true">#</a></h3><p><strong><code>.prevent</code></strong> 相当于在浏览器事件对象的侦听器内部调用。 <strong><code>.preventDefault()</code></strong> 方法。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@submit.prevent</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Form submitted&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">action</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">submit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Submit</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>在上面的示例中使用修饰符 <code>.prevent</code>，单击 Submit 提交按钮后不会将表单提交到 <code>/url</code>。</p><p>相反，AlpineJS 的监听器将处理它并&quot;阻止&quot;事件被进一步处理。</p><h3 id="停止-stop" tabindex="-1">停止 stop <a class="header-anchor" href="#停止-stop" aria-hidden="true">#</a></h3><p>类似于 <code>.prevent</code> 修饰符，<code>.stop</code> 修饰符相当于在浏览器事件对象内部调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation" target="_blank" rel="noreferrer"><code>.stopPropagation()</code></a> 监听器。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight has-focused-lines has-highlighted-lines"><code><span class="line"></span>
<span class="line highlighted"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;We will not get logged&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click.stop</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>在上面的示例中，单击按钮不会在控制台输出日志。是因为立即停止了事件的传播，并且不允许它&quot;冒泡&quot;到其 <code>&lt;div&gt;</code> 上的 <code>@click</code> 侦听器。</p><h3 id="外面-outside" tabindex="-1">外面 outside <a class="header-anchor" href="#外面-outside" aria-hidden="true">#</a></h3><p><code>.outside</code> 是一个用于监听它所附加的元素之外的点击。</p><p>下面是下拉组件示例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight has-focused-lines has-highlighted-lines"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ open: false }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open = ! open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Toggle</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line highlighted"></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-show</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click.outside</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open = false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    Contents</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>在上面的示例中，通过单击 <code>Toggle</code> 按钮显示下拉列表内容后，可以通过单击内容之外的页面上的任意位置来关闭下拉列表。</p><p>因为 <code>.outside</code> 正在监听并非来自其注册元素的点击。</p><h3 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-hidden="true">#</a></h3><p><code>x-on</code> 可以添加 <code>.window</code> 修饰符，Alpine 将在页面的根对象 <code>window</code> 上注册事件监听器而不是元素本身。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.escape.window</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;escape Window alarm&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>上面的代码片段将监听页面上任何位置按下的 <code>Esc</code> 转义键。</p><h3 id="文档-document" tabindex="-1">文档 document <a class="header-anchor" href="#文档-document" aria-hidden="true">#</a></h3><p><code>.document</code> 工作方式类似于 <code>.window</code> 仅在 <code>document</code> 全局而不是全局上注册侦听器 <code>window</code>。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.escape.document</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;escape document alarm&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="仅运行一次-once" tabindex="-1">仅运行一次 once <a class="header-anchor" href="#仅运行一次-once" aria-hidden="true">#</a></h3><p>通过添加 <code>.once</code> 侦听器，可以确保处理程序仅被调用一次。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click.once</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;I will only log once&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="去抖动-debounce" tabindex="-1">去抖动 debounce <a class="header-anchor" href="#去抖动-debounce" aria-hidden="true">#</a></h3><p>有时“去抖动”监听器事件对处理程序很有用，这样它只会在一段时间不活动（默认为 250 毫秒）后才被调用。</p><p>例如，如果有一个搜索字段在用户输入时触发网络请求，添加去抖动将防止网络请求在每次击键时触发。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@input.debounce</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fetch(\`/some-uri/\${$event.target.value}\`)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>现在，不是在每次击键后调用 <code>fetch()</code>，而是只会在 250 毫秒没有击键后调用 <code>fetch()</code>。</p><blockquote><p>通过 <code>$event.target.value</code> 获取当前输入框的值。</p></blockquote><p>如果想延长或缩短去抖动时间，你可以通过在 <code>.debounce</code> 修饰符后面指定一个持续时间来实现，如下所示：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@input.debounce.1500ms</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fetch(\`/some-uri/\${$event.target.value}\`)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>现在 <code>fetch()</code> 只会在 500 毫秒不活动后调用。</p><h3 id="限流-throttle" tabindex="-1">限流 throttle <a class="header-anchor" href="#限流-throttle" aria-hidden="true">#</a></h3><p><code>.throttle</code> 类似于 <code>.debounce</code> 除了它会每隔 250 毫秒执行一次处理程序调用而不是无限期地延迟它。</p><p>这对于可能重复和延长事件触发和使用 <code>.debounce</code> 不起作用的情况很有用，因为仍然希望每隔一段时间处理一次事件。 例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@scroll.window.throttle</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;window scroll throttle&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>如果没有 <code>.throttle</code>，该 <code>console.log(&#39;window scroll throttle&#39;)</code> 方法将在用户向下滚动页面时被触发数百次，这会减慢网站的速度。</p><p>而通过添加 <code>.throttle</code> 修饰符后确保 <code>console.log(&#39;window scroll throttle&#39;)</code> 仅每 250 毫秒调用一次。</p><p>就像 <code>.debounce</code> 一样，可以为节流事件添加自定义持续时间：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@scroll.window.throttle.1500ms</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;window scroll throttle using custom seconds&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>现在只会每 1500 毫秒调用一次表达式。</p><h3 id="自身-self" tabindex="-1">自身 self <a class="header-anchor" href="#自身-self" aria-hidden="true">#</a></h3><p>通过添加 <code>.self</code> 事件侦听器，可以确保事件起源于声明它的元素，而不是来自子元素。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click.self</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;handle click.&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  Click Me</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://alpinejs.dev/alpine_long.svg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>在上面的示例中，在 <code>&lt;button&gt;</code> 标签内有一个 <code>&lt;img&gt;</code> 标签。通常任何源自 <code>&lt;button&gt;</code> 元素内的点击（例如<code>&lt;img&gt;</code>）都会被 <code>@click</code> 按钮上的侦听器接收到。</p><p>但是在这种情况下，因为添加了一个 <code>.self</code>，所以只有单击按钮本身才会调用 click 表达式。而源自 <code>&lt;img&gt;</code> 元素的点击不会被处理。</p><h3 id="驼峰-camel" tabindex="-1">驼峰 camel <a class="header-anchor" href="#驼峰-camel" aria-hidden="true">#</a></h3><p>有时可能想要监听驼峰式事件，例如 <code>customEvent</code> 。由于 HTML 属性内部不支持，因此 Alpine 需要在内部添加修饰符 <code>.camel</code> 的驼峰式大小写对事件名称进行驼峰式大小写。</p><p>通过 <code>.camel</code> 在上面的示例中添加，AlpineJS 现在正在监听 <code>customEvent</code> 而不是 <code>custom-event</code>。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight has-focused-lines has-highlighted-lines"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span></span>
<span class="line has-focus highlighted"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">@custom-event.camel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;handle custom event&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span></span>
<span class="line has-focus highlighted"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$dispatch(&#39;customEvent&#39;, {key: &#39;value&#39;})</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  Click Me</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>使用 <code>$dispatch(&#39;customEvent&#39;)</code> 触发事件</p><p>使用 <code>@custom-event.camel</code> 监听 <code>customEvent</code> 事件，因为 <code>.camel</code> 监听的事件会转化为驼峰写法</p></blockquote><h3 id="点-dot" tabindex="-1">点 dot <a class="header-anchor" href="#点-dot" aria-hidden="true">#</a></h3><p>与 <code>.camel</code> 驼峰修饰符类似，在某些情况下，可能想要监听名称中带有点的事件（如 <code>custom.event</code>）。</p><p>由于事件名称中的点是 Alpine 中保留的字符，因此需要用破折号书写它们并添加 <code>.dot</code> 修饰符。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">@custom-event.dot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;handle custom event&#39;, $event.detail)</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$dispatch(&#39;custom.event&#39;, {key: &#39;value&#39;})</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  Click Me</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>在上面的代码示例 <code>@custom-event.dot</code> 中将对应事件名称 <code>custom.event</code>。</p><h3 id="被动-passive" tabindex="-1">被动 passive <a class="header-anchor" href="#被动-passive" aria-hidden="true">#</a></h3><p>浏览器优化了页面滚动，即使在页面上执行 JavaScript 时也能快速流畅地滚动。但是不正确实施的触摸和滚轮侦听器可能会阻止此优化并导致站点性能不佳。</p><p>例如正在监听鼠标事件，添加 <code>.passive</code> 到监听器中，以免影响性能。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@mouseup.passive</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;mouseup passive&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">mouseup passive</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD" target="_blank" rel="noreferrer">阅读更多关于被动倾听者的信息</a></p>`,102),p=[e];function t(c,r,D,F,y,d){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
