import{_ as s,c as a,o,a as l}from"./app.9d4276a3.js";const u=JSON.parse('{"title":"$watch","description":"","frontmatter":{},"headers":[{"level":2,"title":"获取变更前的值","slug":"获取变更前的值","link":"#获取变更前的值","children":[]},{"level":2,"title":"监听深度","slug":"监听深度","link":"#监听深度","children":[]}],"relativePath":"guide/magics/watch.md","lastUpdated":1672308300000}'),n={name:"guide/magics/watch.md"},p=l(`<h1 id="watch" tabindex="-1">$watch <a class="header-anchor" href="#watch" aria-hidden="true">#</a></h1><p>通过 <code>$watch</code> 魔法方法「监听」一个组件属性。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ open: false }</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#C792EA;">x-init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$watch(&#39;open&#39;, value =&gt; console.log(value))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open = ! open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Toggle Open</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当按钮被点击且 <code>open</code> 被改变时，提供给 <code>$watch</code> 的回调函数将会被调用，当前逻辑是打印新的 <code>value</code> 的值。</p><p>可以使用 <code>.</code> 表示法观察深度嵌套的属性，例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ foo: { bar: &#39;baz&#39; }}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#C792EA;">x-init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$watch(&#39;foo.bar&#39;, value =&gt; console.log(value))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo.bar = &#39;bob&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Toggle Open</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当按下 <code>Toggle Open</code> 按钮时，<code>foo.bar</code> 将被设置为 <code>bob</code>，并且 <code>bob</code> 将会在控制台中打印。</p><h2 id="获取变更前的值" tabindex="-1">获取变更前的值 <a class="header-anchor" href="#获取变更前的值" aria-hidden="true">#</a></h2><p><code>$watch</code> 追踪被监视属性的先前值，可以使用回调的第二个可选参数获取变更前的值，如下所示：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ open: false }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#C792EA;">x-init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$watch(&#39;open&#39;, (value, oldValue) =&gt; console.log(\`current: \${value}, old: \${oldValue}\`))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open = ! open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Toggle Open</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="监听深度" tabindex="-1">监听深度 <a class="header-anchor" href="#监听深度" aria-hidden="true">#</a></h2><p><code>$watch</code> 将自动观察任何级别的变化，当检测到变化时，观察者将返回观察到的属性的值，而不是已更改的子属性的值。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ foo: { bar: &#39;baz&#39; }}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#C792EA;">x-init</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$watch(&#39;foo&#39;, (value, oldValue) =&gt; console.log(value, oldValue))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo.bar = &#39;bob&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Toggle Open</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当按下按钮时，<code>foo.bar</code> 将被设置为 <code>bob</code>，并且 <code>{bar: &#39;bob&#39;} {bar: &#39;bob&#39;}</code> 将被记录到控制台（新旧值）。</p><p>如果需要获取旧的 <code>foo.bar</code> 的值需要通过监听它获得，比如<code>$watch(&#39;foo.bar&#39;, (value, oldValue) =&gt; console.log(value, oldValue))</code>。</p>`,15),e=[p];function t(c,r,D,F,y,d){return o(),a("div",null,e)}const g=s(n,[["render",t]]);export{u as __pageData,g as default};
