import{_ as s,c as a,o as l,a as n}from"./app.6134f378.js";const h=JSON.parse('{"title":"x-on","description":"","frontmatter":{},"headers":[{"level":2,"title":"语法糖","slug":"语法糖","link":"#语法糖","children":[]},{"level":2,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]},{"level":2,"title":"键盘事件","slug":"键盘事件","link":"#键盘事件","children":[]},{"level":2,"title":"自定义事件","slug":"自定义事件","link":"#自定义事件","children":[]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":3,"title":"阻止 prevent","slug":"阻止-prevent","link":"#阻止-prevent","children":[]},{"level":3,"title":"停止 stop","slug":"停止-stop","link":"#停止-stop","children":[]},{"level":3,"title":"外面 outside","slug":"外面-outside","link":"#外面-outside","children":[]},{"level":3,"title":"window 对象","slug":"window-对象","link":"#window-对象","children":[]},{"level":3,"title":"文档 document","slug":"文档-document","link":"#文档-document","children":[]},{"level":3,"title":"去抖动 debounce","slug":"去抖动-debounce","link":"#去抖动-debounce","children":[]},{"level":3,"title":"限流 throttle","slug":"限流-throttle","link":"#限流-throttle","children":[]},{"level":3,"title":"自身 self","slug":"自身-self","link":"#自身-self","children":[]},{"level":3,"title":"驼峰 camel","slug":"驼峰-camel","link":"#驼峰-camel","children":[]},{"level":3,"title":"点 dot","slug":"点-dot","link":"#点-dot","children":[]},{"level":3,"title":"被动 passive","slug":"被动-passive","link":"#被动-passive","children":[]}]}],"relativePath":"guide/x-on.md","lastUpdated":1672221545000}'),t={name:"guide/x-on.md"},e=n(`<h1 id="x-on" tabindex="-1">x-on <a class="header-anchor" href="#x-on" aria-hidden="true">#</a></h1><p><code>x-on</code> 允许在调度的 DOM 事件上运行代码。 如下示例，当单击按钮时会弹出提示。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-on:click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Hello&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><code>x-on</code> 只能监听小写名称的事件，因为 HTML 属性不区分大小写。</p><p>写作 <code>x-on:CLICK</code> 将侦听一个名为的事件 <code>click</code>。</p><p>如果需要侦听具有驼峰命名的自定义事件，则可以使用 <code>.camel</code> 帮助程序来解决此限制。</p><p>或者可以使用 <code>x-bind</code> 将 <code>x-on</code> 指令附加到 javascript 代码中的元素。</p><h2 id="语法糖" tabindex="-1">语法糖 <a class="header-anchor" href="#语法糖" aria-hidden="true">#</a></h2><p>Alpine 中支持将 <code>x-on:</code> 缩写成 <code>@</code>，例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--Before--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-on:click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Hello&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--After--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Hello&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-hidden="true">#</a></h2><p>如果需要在表达式中访问原生的 JavaScript 事件对象，可以使用 Alpine 提供的 <code>$event</code> 获取事件属性。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log($event.target.getAttribute(&#39;message&#39;))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">message</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Say Hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>上面通过 <code>$event.target.getAttribute()</code> 方法获取事件 DOM 的属性，也可以获取通过 <code>$event.target.innerHTML</code> 获取元素内部HTML。</p><p>另外，Alpine 还将事件对象传递给任何不带尾随括号引用的方法。例如：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handleClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click Me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handleClick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a></h2><p>Alpine 可以很容易地监听特定键上 <code>keydown</code> 的 <code>keyup</code> 事件。</p><p>下面是侦听输入元素内的 Enter 键的示例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.enter</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Keyup enter submitted!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>同时也可以添加一些键修饰符以实现更复杂的侦听器。例如：</p><p>按住并按下 <strong>Shift</strong> 键时运行的侦听 <strong>Enter</strong> 器，但在 <strong>Enter</strong> 单独按下时不会运行。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.shift.enter</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Keyup shift enter submitted!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>可以直接使用通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/UI_Events/Keyboard_event_key_values" target="_blank" rel="noreferrer"><code>KeyboardEvent.keys</code></a> 修饰符公开的任何有效键名，比如 <code>PageDown</code> 需要将它们转换为驼峰写法。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@keyup.page-down</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Page down submitted!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>为了便于参考，这里列出了常用的修饰键。</p><table><thead><tr><th>修饰符</th><th style="text-align:left;">键盘键</th></tr></thead><tbody><tr><td><code>.shift</code></td><td style="text-align:left;">Shift 换挡键</td></tr><tr><td><code>.enter</code></td><td style="text-align:left;">Enter 确认键</td></tr><tr><td><code>.space</code></td><td style="text-align:left;">Space 空格键</td></tr><tr><td><code>.ctrl</code></td><td style="text-align:left;">控制键</td></tr><tr><td><code>.meta</code></td><td style="text-align:left;">Mac 对应 Cmd，Windows 对应 Windows</td></tr><tr><td><code>.alt</code></td><td style="text-align:left;">Alt 按键</td></tr><tr><td><code>.up</code> <code>.down</code> <code>.left</code> <code>.right</code></td><td style="text-align:left;">上/下/左/右箭头</td></tr><tr><td><code>.escape</code></td><td style="text-align:left;">ESC按键</td></tr><tr><td><code>.tab</code></td><td style="text-align:left;">Tab按键</td></tr><tr><td><code>.caps-lock</code></td><td style="text-align:left;">大写锁定</td></tr><tr><td><code>.equal</code></td><td style="text-align:left;">等于号</td></tr><tr><td><code>.period</code></td><td style="text-align:left;">句号</td></tr><tr><td><code>.slash</code></td><td style="text-align:left;">斜线 /</td></tr></tbody></table><h2 id="自定义事件" tabindex="-1">自定义事件 <a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a></h2><p>AlpineJS 事件监听器是原生 DOM 事件监听器封装，因此它可以监听任何 DOM 事件，包括自定义事件。</p><p>下面是一个自定义 DOM 事件调度并监听它的组件示例：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@custom-event</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Click dispatchEvent button was clicked!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$event.target.dispatchEvent(new CustomEvent(&#39;custom-event&#39;, { bubbles: true }))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click dispatchEvent</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>单击按钮时，<code>@custom-event</code> 将调用侦听器。</p><p>因为 <code>.dispatchEvent()</code> 的写法很冗长，AlpineJS 提供了一个 <code>$dispatch</code> 帮助程序来简化事情。</p><p>AlpineJS 提供一个魔法属性 <code>$dispatch</code> 重写的同一个组件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@custom-event</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(&#39;Click $dispatch button was Clicked!&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$dispatch(&#39;custom-event&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click $dispatch</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当然，也可以在 JavaScript 中通过使用 <code>addEventListener()</code> 来监听 AlpineJS 中发布的自定义事件。如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">x-data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$dispatch(&#39;my-custom-event&#39;, {key: &#39;value&#39;})</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click $dispatch</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-custom-event</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">detail</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key))</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-hidden="true">#</a></h2><p>AlpineJS 提供了许多指令修饰符来自定义事件侦听器的行为。</p><h3 id="阻止-prevent" tabindex="-1">阻止 prevent <a class="header-anchor" href="#阻止-prevent" aria-hidden="true">#</a></h3><h3 id="停止-stop" tabindex="-1">停止 stop <a class="header-anchor" href="#停止-stop" aria-hidden="true">#</a></h3><h3 id="外面-outside" tabindex="-1">外面 outside <a class="header-anchor" href="#外面-outside" aria-hidden="true">#</a></h3><h3 id="window-对象" tabindex="-1">window 对象 <a class="header-anchor" href="#window-对象" aria-hidden="true">#</a></h3><h3 id="文档-document" tabindex="-1">文档 document <a class="header-anchor" href="#文档-document" aria-hidden="true">#</a></h3><h3 id="去抖动-debounce" tabindex="-1">去抖动 debounce <a class="header-anchor" href="#去抖动-debounce" aria-hidden="true">#</a></h3><h3 id="限流-throttle" tabindex="-1">限流 throttle <a class="header-anchor" href="#限流-throttle" aria-hidden="true">#</a></h3><h3 id="自身-self" tabindex="-1">自身 self <a class="header-anchor" href="#自身-self" aria-hidden="true">#</a></h3><h3 id="驼峰-camel" tabindex="-1">驼峰 camel <a class="header-anchor" href="#驼峰-camel" aria-hidden="true">#</a></h3><h3 id="点-dot" tabindex="-1">点 dot <a class="header-anchor" href="#点-dot" aria-hidden="true">#</a></h3><h3 id="被动-passive" tabindex="-1">被动 passive <a class="header-anchor" href="#被动-passive" aria-hidden="true">#</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD" target="_blank" rel="noreferrer">阅读更多关于被动倾听者的信息</a></p>`,51),o=[e];function p(c,r,d,D,i,F){return l(),a("div",null,o)}const u=s(t,[["render",p]]);export{h as __pageData,u as default};
